# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Build CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build:
    defaults:
      run:
        shell: pwsh
    env:
      VCPKG_BINARY_SOURCES: "clear;nuget,GitHub,readwrite"
    strategy:
      fail-fast: false
      matrix:
        runner:
          - 'windows-2022'
    runs-on: ${{ matrix.runner }}

    steps:
    - uses: actions/checkout@v5
    - name: check winget installed
      id: winget
      run: |
        $winget = (Get-Command winget -ErrorAction SilentlyContinue)
        "found=$([bool]($winget) -as [string])" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append -Encoding utf8

    - name: Install winget
      if: ${{ steps.winget.outputs.found == 'false' }}
      uses: Cyberboss/install-winget@v1
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # https://learn.microsoft.com/en-us/vcpkg/consume/binary-caching-github-packages
    - name: Setup NuGet Credentials for vcpkg
      run: |
        & $(Get-Command nuget).Path sources add `
          -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" `
          -storepasswordincleartext `
          -name "GitHub" `
          -username "${{ github.repository_owner }}" `
          -password "${{ secrets.GITHUB_TOKEN }}"
        & $(Get-Command nuget).Path setapikey "${{ secrets.GITHUB_TOKEN }}" -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

    - name: Setup development environment
      run: |
        .\tools\setup_devenv.ps1
        echo "CUDA_PATH=${Env:CUDA_PATH}" >> $Env:GITHUB_ENV
        echo "${Env:CUDA_PATH}\bin" >> $Env:GITHUB_PATH

    - name: Build
      run: |
        .\tools\build.ps1

    - name: Run tests
      run: |
        .\tools\test.ps1

    - name: Build (Release)
      run: |
        .\tools\build.ps1 -build_type=Release -clean=1

    - name: Run tests (Release)
      run: |
        .\tools\test.ps1
